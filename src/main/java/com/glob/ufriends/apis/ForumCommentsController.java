package com.glob.ufriends.apis;

import com.glob.ufriends.entities.ForumComments;
import com.glob.ufriends.services.ForumCommentsService;
import com.glob.ufriends.services.ForumTopicService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import org.springframework.transaction.annotation.Transactional;

@RequestMapping(value = "/api/v1/forumComments")
@RestController
public class ForumCommentsController {

    @Autowired
    private ForumCommentsService service;
    
    @Autowired
    private ForumTopicService forumTopicService;

    /*
     * JSON Object for Forum Comments (POST):
     *
     * {
     *   id: int, // Not needed in post. This is autogenerated via a sequence in the db
     *   forumId: {id: int}, // Forum topic object that has the id of the forum topic
     *   authorId: {id: String}, // User object that has the id of the user
     *   description: String,
     *   creationDate: Date || null, // Not needed in post. The date is set in the DB using a trigger
     *   isAnon: int (boolean) // 0 for false, 1 for true
     * }
     *
     * */

    @Transactional
    @PostMapping
    public ForumComments addForumComments(@RequestBody ForumComments forumComments) {
        ForumComments forumComment = service.saveForumComments(forumComments);
        
        int forumTopicId = forumComments.getForumId().getId();
        int newForumTCQuantity = forumTopicService.getForumTopic(forumTopicId).getCommentsQuantity() + 1;
        
        // Update comments quantity by adding one due to new comment
        forumTopicService.updateForumTopicCommentsQuantity(newForumTCQuantity, forumTopicId); 
     
        return forumComment;
    }

    @GetMapping
    public List<ForumComments> findAllForumComments() {
        return service.getAllForumComments();
    }

    @GetMapping(path = "{id}")
    public ForumComments findForumCommentsById(@PathVariable("id") int id) {
        return service.getForumComments(id);
    }
    
    // The parameter is the forumUID
    @GetMapping(path = "/forum/{id}")
    public List<ForumComments> findForumCommentsByForumID(@PathVariable("id") int id) {
        return service.findForumCommentsByForumID(id);
    }

    @GetMapping(path = "/orderByDateDesc")
    public List<ForumComments> findAllForumCommentsOrderByDate() {
        return service.getForumCommentsOrderedByCDate();
    }

    // Be sure to send an object with the id
    @Transactional
    @DeleteMapping
    public void deleteForumComments(@RequestBody ForumComments forumComments){

        ForumComments selectedFC = service.getForumComments(forumComments.getId());

        int forumTopicId = selectedFC.getForumId().getId();

        int newForumTCQuantity = forumTopicService.getForumTopic(forumTopicId).getCommentsQuantity() - 1;

        // Update comments quantity by substracting one due to deleted comment
        forumTopicService.updateForumTopicCommentsQuantity(newForumTCQuantity, forumTopicId);

        service.deleteForumComments(forumComments);
    }
    
}
